
# Documentation d'impl√©mentation du script de monitoring VPN

## üìã Pr√©requis

- Syst√®me Linux avec systemd
- OpenVPN 3
- Acc√®s sudo
- Compte Gotify (optionnel)

## üöÄ √âtapes d'installation

### 1. Cr√©ation du script

```bash
sudo nano /usr/local/bin/vpn-monitor.sh
```


```sh
#!/bin/bash

# Chemin du fichier de log
LOG_FILE="/var/log/vpn_monitor_script.log"

# URL Gotify
GOTIFY_URL="https://gotify.wetter.land/message"
GOTIFY_TOKEN="VOTRE_TOKEN_GOTIFY"

# Chemin du fichier de statut
STATUS_FILE="/tmp/vpn_status.tmp"

# Nom du service OpenVPN
VPN_SERVICE="openvpn3-session@wetterland.service"

# Fonction de log
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Fonction d'envoi de notification Gotify
send_gotify_notification() {
    local title="$1"
    local message="$2"
    local priority="${3:-5}"
    
    curl -X POST ${GOTIFY_URL}/message?token=${GOTIFY_TOKEN \
         -F "title=$title" \
         -F "message=$message" \
         -F "priority=$priority" 2>/dev/null
}

# Fonction de v√©rification de l'√©tat pr√©c√©dent
check_previous_status() {
    # Si le fichier de statut n'existe pas, c'est le premier check
    if [ ! -f "$STATUS_FILE" ]; then
        return 1
    fi
    
    # Lire le statut pr√©c√©dent
    local previous_status=$(cat "$STATUS_FILE")
    
    # Si le statut pr√©c√©dent √©tait d√©j√† down, ne pas renvoyer de notification
    if [ "$previous_status" = "down" ]; then
        return 0
    fi
    
    return 1
}

# Fonction principale
main() {
    log_message "D√©but du script de monitoring VPN"

    # V√©rification de l'√©tat du service
    systemctl is-active --quiet "$VPN_SERVICE"
    
    if [ $? -ne 0 ]; then
        # VPN est down
        log_message "Service OpenVPN down"
        
        # Enregistrer le statut down
        echo "down" > "$STATUS_FILE"
        
        # V√©rifier si on doit envoyer une notification
        if ! check_previous_status; then
            # Envoyer une notification haute priorit√©
            send_gotify_notification "VPN DOWN" "Le service VPN est actuellement hors service" 8
        fi
        
        # Tentative de restauration
        log_message "Tentative de restauration du service OpenVPN"
        systemctl restart "$VPN_SERVICE"

        # V√©rification du red√©marrage
        if [ $? -eq 0 ]; then
            # Attente de quelques secondes pour stabilisation
            sleep 10
            
            # V√©rification √† nouveau de l'√©tat
            systemctl is-active --quiet "$VPN_SERVICE"
            
            if [ $? -eq 0 ]; then
                log_message "Service OpenVPN restaur√© avec succ√®s"
                
                # Enregistrer le statut up
                echo "up" > "$STATUS_FILE"
                
                # Montage des syst√®mes de fichiers
                log_message "Ex√©cution de mount -a"
                mount -a
                
                if [ $? -eq 0 ]; then
                    log_message "Montage des syst√®mes de fichiers r√©ussi"
                    send_gotify_notification "VPN Restaur√©" "Service VPN red√©marr√© et montage des syst√®mes de fichiers effectu√©s"
                else
                    log_message "ERREUR : √âchec du montage des syst√®mes de fichiers"
                    send_gotify_notification "VPN Montage Erreur" "√âchec du montage des syst√®mes de fichiers apr√®s restauration VPN" 6
                    exit 1
                fi
            else
                log_message "ERREUR : Impossible de restaurer le service OpenVPN"
                send_gotify_notification "VPN Erreur Critique" "Impossible de restaurer le service OpenVPN" 8
                exit 1
            fi
        else
            log_message "ERREUR : √âchec du red√©marrage du service OpenVPN"
            send_gotify_notification "VPN Erreur Red√©marrage" "Impossible de red√©marrer le service OpenVPN" 7
            exit 1
        fi
    else
        # VPN est up
        log_message "Service OpenVPN actif, aucune action requise"
        
        # Enregistrer le statut up
        echo "up" > "$STATUS_FILE"
        
        exit 0
    fi
}

# Gestion des erreurs
trap 'log_message "Script interrompu"; exit 1' SIGINT SIGTERM ERR

# Ex√©cution du script
main
```
Collez le contenu du script pr√©c√©dent et remplacez :
- `GOTIFY_TOKEN` par votre token
- Ajustez le nom du service VPN si n√©cessaire

### 2. Rendre le script ex√©cutable

```bash
sudo chmod +x /usr/local/bin/vpn-monitor.sh
```

### 3. Cr√©ation des fichiers systemd

#### Fichier de service

```bash
sudo nano /etc/systemd/system/vpn-monitor.service
```

```ini
[Unit]
Description=VPN Monitoring Service
After=network.target

[Service]
Type=oneshot
ExecStart=/usr/local/bin/vpn-monitor.sh
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
```

#### Fichier timer

```bash
sudo nano /etc/systemd/system/vpn-monitor.timer
```

```ini
[Unit]
Description=VPN Monitoring Timer

[Timer]
OnCalendar=*:0/5
Persistent=true

[Install]
WantedBy=timers.target
```

### 4. Activation et d√©marrage

```bash
# Recharger la configuration systemd
sudo systemctl daemon-reload

# Activer le timer
sudo systemctl enable vpn-monitor.timer

# D√©marrer le timer
sudo systemctl start vpn-monitor.timer
```

## üîç V√©rification

### Statut du timer

```bash
sudo systemctl status vpn-monitor.timer
```

### Logs

```bash
# Logs systemd
journalctl -u vpn-monitor.service

# Logs du script
tail -f /var/log/vpn_monitor_script.log
```

## üõ† Personnalisation

### Modification de la fr√©quence

Dans le fichier `.timer`, modifiez `OnCalendar=*:0/5` :
- `*:0/5` : toutes les 5 minutes
- `*:0/10` : toutes les 10 minutes
- `*-*-* 06:00:00` : une fois par jour √† 6h

## üêû D√©pannage

### Probl√®mes courants

1. **Permissions**
   - Assurez-vous que le script est ex√©cutable
   - V√©rifiez les droits d'acc√®s aux fichiers

2. **Notifications Gotify**
   - V√©rifiez le token
   - Assurez-vous que l'URL est correcte
   - Testez manuellement avec curl

3. **Service VPN**
   - V√©rifiez le nom exact du service
   - Confirmez que le service existe

### Test manuel

```bash
# Ex√©cution manuelle du script
sudo /usr/local/bin/vpn-monitor.sh

# V√©rification des erreurs
echo $?
```

## üîí S√©curit√©

- Limitez les permissions du script
- Prot√©gez le fichier de log
- Utilisez des tokens s√©curis√©s pour Gotify

```bash
# Permissions recommand√©es
sudo chown root:root /usr/local/bin/vpn-monitor.sh
sudo chmod 750 /usr/local/bin/vpn-monitor.sh
```

## üîß Maintenance

- Mettez √† jour r√©guli√®rement le script
- Surveillez les logs
- Ajustez la configuration selon vos besoins

## üì¶ Annexes

### Variables configurables

- `LOG_FILE` : Chemin du fichier de log
- `GOTIFY_URL` : URL du serveur Gotify
- `GOTIFY_TOKEN` : Token d'authentification
- `VPN_SERVICE` : Nom du service VPN

## üí° Conseils avanc√©s

- Consid√©rez une redondance VPN
- Mettez en place des alertes sur plusieurs canaux
- Automatisez les mises √† jour du script

## üìù Exemple de script complet

```bash
#!/bin/bash

# Configuration
LOG_FILE="/var/log/vpn_monitor_script.log"
GOTIFY_URL="https://gotify.example.com/message"
GOTIFY_TOKEN="your_token_here"
VPN_SERVICE="openvpn3-session@wetterland.service"

# Reste du script (comme dans l'exemple pr√©c√©dent)
...
```

---

**Note**: Cette documentation est un guide g√©n√©rique. Adaptez-la √† votre environnement sp√©cifique.